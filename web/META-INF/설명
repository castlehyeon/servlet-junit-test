1. Model2 기반의 MVC 패턴 적용 웹 프로젝트

Model1 >> 요청을 JSP 받아서 처리 

Model2 >> 요청을 servlet 받아서 처리

+ MVC

Model : JAVA 클래스 > DTO , DAO(JDBC)
View  : html or jsp(EL & JSTL)
Controller : servlet(웹용 자바파일)
---------------------------------------------------

JSP 없던 시절 >> Servlet 모든 것 >> UI 담당

DB 작업
create table memo(
    id varchar2(20) not null,
    email varchar2(20) not null,
    content varchar2(100)
);
desc memo;

1. 드라이버 :ojdbc6.jar ->> mariadb
--------------------------------------------------
MVC
Model
View
Controller

패키지 정의
kr.or.kosa.dto
kr.or.kosa.dao
kr.or.kosa.service
kr.or.kosa.controller
kr.or.kosa.utils >> 날짜, 문자 등을 처리함 함수를 가지는 클래스

1. DB > Table > memo

1.1 DTO (테이블 당 1개) >> join(Dept, location) 된 결과를 담는 DTO 생성
1.2 DB 연결 테스트
1.3 DAO (최소 5개 CRUD : insert, update, delete, 한건조회, 전체 조회) + LIKE, 여러개의 조건 ....
+
디자인 작업도 같이 (jsp, html) UI 작업 >> 스토리 보드

2. service에서 dao, dto 작업 .... 현재 ....

3. controller (매핑 주소 .. 요청 받고 .. 처리 ..)

------------------------------------------------

Tomcat7.0 서버에 있는 Jar 복사

-tomcat-dbcp 파일을 사용해서 DBCP

​

2. WEB-INF > lib >

- ojdbc6.jar

- tomcat-dbcp.jar

3. Tomcat 설정파일인 context.xml 파일

-META-INF > context.xml

만약에 모든 프로젝트에서 공통으로 사용하고 싶다면

- Tomcat7.0 서버가 가지고 있는 context.xml 파일에

연결설정 및 pool 옵션 설정을 하면 됩니다

현재 프로젝트에서 설정하기 위해서

-META-INF > context.xml 작업 실행

(자바에서 설정관련 파일을 저장하는 폴더)

4. web.xml 기본 설정 하기

resource-ref 통한 context.xml 설정참조 코딩

<resource-ref>

<description>Connection Info</description>

<res-ref-name>jdbc/oracle</res-ref-name> /jdbc/oracle == context.xml설정

<res-type>javax.sql.DataSource</res-type>

<res-auth>Container</res-auth>

</resource-ref>

5. 프로그램 설정 (JNDI 사용)

//컴에서 C: (java:comp/env) 밑에있는 (->jdbc->oracle) jata.txt 찿아라

Context context = new InitialContext();

context.lookup("java:comp/env/jdbc/oracle");

​

3. JNDI(Java Naming and Directory Interface)

- 서비스가 다른 서비스를 탐색할 때 유용하게 사용된다. (분산된 자원)

- 분산된 자원 끼리의 탐색을 원할하게 하기 위한 type casting 임. (DNS 도 이에 속함)

- JNDI에 설정해 놓았다는것은 Context.xml에 리소스를 생성해놓은 것을 말한다.

// 등록된 객체 = context.lookup("등록된 JNDI 이름");

DataSource ds = (DataSource)context.lookup("java:comp/env/jdbc/mySpring");

// 파일 시스템에서 루트의 역할을 하는 것이 c:\에서 부터 찾는 것처럼 실제 등록된 지원도

// 루트의 역할을 하는 곳 부터 찾아야 하고 그 역할을 하는 것이 java:comp/env이다.

// 파일 시스템 폴더명을 적을 때 c:\ 폴더명을 적는 것처럼 자원을 찾을 때에도 java:comp/env/JNDI 명으로 표현한다.

----------------------

​

​

​

<?xml version="1.0" encoding="UTF-8"?>

<Context>

<!-- maxActive : 최대 동시 대여 가능 커넥션수

maxIdle : 최소 보유 커넥션수

maxWait : 최대 대기 시간 -> 넘겼는데도 빈 커넥션이 없으면 Exception (1=5초, 180=15분)

removeAbandoned : (true) 대여시간 초과했는데 반납 안된 커넥션 처리

removeAbandonedTimeout : 대여시간 설정 ( 1=5초 60=5분 )

logAbandoned : (true) 삭제시에 로그를 남길 것인가?

validationQuery : 커넥션이 살아 있는지 체크 하는 쿼리로 오라클의 경우에는 "select 1 from dual", MySQL의 경우에는 "select 1"

testWhileIdle : (true) 커넥션에 아무런 데이터 송수신이 없을 경우 테스트를 할지 여부를 결정합니다.

timeBetweenEvictionRunsMillis : 커넥션이 쉬고 있을 때 커넥션 체크 쿼리를 실행하는 시간 간격을 설정합니다. 밀리 세컨드로 설정하며, 저보통 60000(1분)을 줍니다. -->

​

​

<Resource maxWait="-1"

maxIdle="20"

maxActive="10"

password="1004"

username="kglim"

url="jdbc:oracle:thin:@192.168.7.58:1521:XE"

driverClassName="oracle.jdbc.OracleDriver"

type="javax.sql.DataSource"

auth="Container"

name="jdbc/oracle" />

<Resource maxWait="-1"

maxIdle="20"

maxActive="10"

password="1004"

username="Myuser"

url="jdbc:mysql://192.168.7.227:3306/mydb"

driverClassName="com.mysql.jdbc.Driver"

type="javax.sql.DataSource"

auth="Container"

name="jdbc/mysql" />

</Context>

​

